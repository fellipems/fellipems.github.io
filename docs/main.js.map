{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app-routing.module.ts","./src/app/todo.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  apiUrl: 'http://localhost:8080/api/todos'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { TodoService } from './todo.service';\nimport { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';  // import para criar um controler para receber o valor digitado em input. FormGroup é uma classe(vamos criar um objeto a partir desta classe) que vai representar os campos do formulário\nimport { Todo } from './todo';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit{\n\n  todos: Todo[] = [];\n\n  form: FormGroup = new FormGroup({ // ({ passamos um objeto aqui dentro })\n    description: new FormControl('', [Validators.required, Validators.minLength(4)])    // campo description que vai receber o FormControl. No FormControl, o primeiro parâmetro é o valor padrão/inicial do campo. Já no segundo, podemos passar um array de validadores. O .required é para fazer o campo ser obrigatório\n  })\n\n  constructor(private service: TodoService){        // Fazendo a injeção do nosso service. Colocando uma propriedade dentro do construtor, se ela for injetável o próprio container de injeção de dependência do Angular, vai fazer essa injeção deste serviço \n  }\n\n  ngOnInit(){   // na inicialiação do component, já carregar os dados do BD\n    this.listarTodos();\n  }\n\n  listarTodos(){\n    this.service.listar().subscribe(todoList => this.todos = todoList);     // todos vai receber a listagem do nosso BD da API, assim, ao executar a página, já carregará a lista\n  }\n\n  submit(){\n    console.log(this.form.value)    // imprime o valor que está no campo. Aqui, vamos pegar todos os FormControl dentro do nosso form, e criar um oobjeto apartir do nome dos campos. Retorna um JSON\n    const todo: Todo = { ...this.form.value } // spread operator(...). Espalha todos os valores desse objeto para o que criamos. Cria um Todo apartir dos valores do formulário \n    //this.service.salvar(todo).subscribe(savedTodo => console.log(savedTodo));   // o método salvar retornará um observable e o observable tem um método que é subscribe, em que ele tem um observer em que faz com que podemos tratar o retorno da nossa requisição \n    // por isso quando dermos um salvar no objeto e um subscribe no observable, vai retornar o todo que foi salvo e retornado lá da API. \n    this.service.salvar(todo)   // chamando o service com o método salvar\n      .subscribe(savedTodo => {\n        this.todos.push(savedTodo);  // Pegar o Todo salvo e colocar no array/lista\n        this.form.reset();    // resetando o formulário e limpando o campo de adicionar Todos quando clicar no add\n      })\n  }\n\n  delete(todo: Todo){\n    this.service.deletar(todo.id).subscribe({\n      next: (response) => this.listarTodos()      // método next que recebe a resposta (response).  Quando deletarmos o Todo, queremos tirar ele da lista. 2 maneiras: pegar o array e exlcuir o elemento da lista ou podemos listar os Todos novamente, já atualizados.\n    })\n  }\n\n  done(todo: Todo){\n    this.service.marcarComoConcluido(todo.id).subscribe({\n      next: (response) => {   // a response do método é o que a API está retornando \n        todo.done = response.done\n        todo.doneDate = response.doneDate\n      }\n    })\n  }\n    // quando trabalhamos com APIs, temos que trabalhar com as camadas de services para fazer o acesso\n}\n","<nav class=\"navbar navbar-dark bg-dark\">\n  <a class=\"navbar-brand\">Todo APP</a>\n</nav>\n<div class=\"container mt-4\">\n  <h3>Todos</h3>\n  <hr /> <!-- separador -->\n  <form [formGroup]=\"form\" (ngSubmit)=\"submit()\">   <!-- esta propriedade \"form\" é a variável que criamos no app.component. O evento ngSubmit para submeter o formulário que vai receber nosso método de submit -->\n    <div class=\"row\">\n      <div class=\"col-md-6\"> \n        <input type=\"text\" class=\"form-control\" formControlName=\"description\">    <!-- qual nome do formControl deste formGroup que vai representar este campo de texto  -->\n      </div>  <!-- definimos uma linha (row) em que cada linha tem 12 posições e dentro dessa linha de 12 posições, colocamos uma coluna com 6 posições   -->\n      <div class=\"col-md-2\">\n        <button type=\"submit\" [disabled]=\"!form.get('description').valid\" class=\"btn btn-primary\">Add</button>  <!-- Vai estar desabilitado o botão quando o form control for inválido, não esquecer no button colocar o type para submit -->\n      </div>\n    </div>\n  </form>\n  <hr />\n  <div class=\"row\">\n    <div class=\"col-md-7\">\n      <ul class=\"list-group\">\n        <li *ngFor=\"let todo of todos\" class=\"list-group-item d-flex justify-content-between align-items-center\">  <!-- Cada li desse tem que ser um elemento novo/um todo novo que adicionarmos -->\n          <span class=\"{{ todo.done ? 'done' : '' }}\">\n            {{ todo.description }} - Finalizado dia: {{ todo.doneDate }}\n          </span>\n          <div class=\"btn-group\">\n            <button class=\"btn btn-success\" [disabled]=\"todo.done\" (click)=\"done(todo)\">Done</button>\n            <button class=\"btn btn-danger ml-1\" (click)=\"delete(todo)\">Delete</button>    <!-- (eventBinding). Recebe como parâmetro o Todo -->\n          </div>\n        </li>\n      </ul>\n    </div>\n  </div>\n</div>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ReactiveFormsModule } from '@angular/forms' // import de um módulo para trabalhar com formulários reativos\nimport { HttpClientModule } from '@angular/common/http'\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { environment } from './../environments/environment';\nimport { Todo } from './todo';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\n\n\n// Chamadas da nossa API sempre bom fazer nos services\n@Injectable({   // fazer a injeção desta dependência\n  providedIn: 'root'\n})\nexport class TodoService {\n\n  apiUrl: string = environment.apiUrl;\n\n  constructor(  // fazer a injeção de uma dependência do nosso cliente Http no construtor do nosso Todo Service. No servic eimportamos o HttpClient e não o Module\n    private http: HttpClient    // já injeta direto\n  ) { }\n\n  salvar(todo: Todo) : Observable<Todo>{    // no TypeScript trabalhamos com chamadas Assíncronas, ou seja, mandamos a chaamda para o servidor e não sabemos quanto tempo vai demorar essa requisição. Por isso tem o Observable, ele vai ficar \"observando\" o retorno dessa requisição \n    return this.http.post<Todo>(this.apiUrl, todo);   // no post recebe dois parâmetros, um é a URL e o segundo é o objeto JSON que mandamos para a requisição da URL\n  }\n\n  listar() : Observable<Todo[]>{    \n    return this.http.get<Todo[]>(this.apiUrl);\n  }\n\n  deletar(id: number) : Observable<void>{   // mesmo não retornando nada temos que dar um retorno do Observable void, pois não vamos receber nada de volta\n    //const url = this.apiUrl + '/' + id;\n    const url = `${this.apiUrl}/${id}`;    // fizemos isto pois precisamos passar o Id via URL para deletar. Passamos a url base da api + / + o id que queremos excluir. Template String com duas crases \" `` \" utilizando um recurso do JS\n    return this.http.delete<void>(url);\n  }\n\n  marcarComoConcluido(id: number) : Observable<Todo>{\n    const url = `${this.apiUrl}/${id}/done`;\n    return this.http.patch<Todo>(url, {});    // passamos um objeto vazio porque o método patch exige que passamos um corpo da requisição. Como estamos atualizando uma propriedade específica não precisamos passar as propriedades que gostariamos de atualizar(ex: {done: true, description})\n  }\n}\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}